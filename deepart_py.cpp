// This file has been generated by Py++.

#include "boost/python.hpp"

#include "deepart.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(deepart_py){
    { //::deepart::DeepArt
        typedef bp::class_< deepart::DeepArt > DeepArt_exposer_t;
        DeepArt_exposer_t DeepArt_exposer = DeepArt_exposer_t( "DeepArt", bp::init< std::shared_ptr< caffe::Net< float > > const & >(( bp::arg("caffe_net") )) );
        bp::scope DeepArt_scope( DeepArt_exposer );
        bp::implicitly_convertible< std::shared_ptr< caffe::Net< float > > const &, deepart::DeepArt >();
        { //::deepart::DeepArt::CreateCaffeNet
        
            typedef ::std::shared_ptr< caffe::Net< float > > ( *CreateCaffeNet_function_type )( int,::std::string const &,::std::string const & );
            
            DeepArt_exposer.def( 
                "CreateCaffeNet"
                , CreateCaffeNet_function_type( &::deepart::DeepArt::CreateCaffeNet )
                , ( bp::arg("gpu_id"), bp::arg("model_def_path"), bp::arg("weight_path") ) );
        
        }
        { //::deepart::DeepArt::Draw
        
            typedef int ( ::deepart::DeepArt::*Draw_function_type )( ::std::string const &,::std::string const &,::std::string const &,int ) ;
            
            DeepArt_exposer.def( 
                "Draw"
                , Draw_function_type( &::deepart::DeepArt::Draw )
                , ( bp::arg("output_path"), bp::arg("image_path"), bp::arg("opti_method"), bp::arg("iter_num")=(int)(20) ) );
        
        }
        { //::deepart::DeepArt::Init
        
            typedef int ( ::deepart::DeepArt::*Init_function_type )( ::std::string const &,::std::string const & ) ;
            
            DeepArt_exposer.def( 
                "Init"
                , Init_function_type( &::deepart::DeepArt::Init )
                , ( bp::arg("style_param_file"), bp::arg("style_image_path") ) );
        
        }
        DeepArt_exposer.staticmethod( "CreateCaffeNet" );
    }
}
